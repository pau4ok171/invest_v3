@use '../../styles/tools';
@use './variables' as *;

@include tools.layer('components') {
  // Block
  .base-progress-linear {
    background: transparent;
    overflow: hidden;
    position: relative;
    transition: $progress-linear-transition;
    width: 100%;

    &--rounded {
      @include tools.rounded($progress-linear-border-radius);
    }

    @media (forced-colors: active) {
      border: thin solid buttontext;
    }
  }

  // Elements
  .base-progress-linear__background,
  .base-progress-linear__buffer {
    background: $progress-linear-background;
    bottom: 0;
    left: 0;
    opacity: $progress-linear-background-opacity;
    position: absolute;
    top: 0;
    width: 100%;
    transition-property: width, left, right;
    transition: inherit;
  }

  @media (forced-colors: active) {
    .base-progress-linear__buffer {
      background-color: highlight;
      opacity: $progress-linear-stream-opacity;
    }
  }

  .base-progress-linear__content {
    align-items: center;
    display: flex;
    height: 100%;
    justify-content: center;
    left: 0;
    pointer-events: none;
    position: absolute;
    top: 0;
    width: 100%;
  }

  .base-progress-linear__determinate,
  .base-progress-linear__indeterminate {
    background: $progress-linear-background;

    @media (forced-colors: active) {
      background-color: highlight;
    }
  }

  .base-progress-linear__determinate {
    height: inherit;
    left: 0;
    position: absolute;
    transition: inherit;
    transition-property: width, left, right;
  }

  .base-progress-linear__indeterminate {
    .long, .short {
      animation-play-state: paused;
      animation-duration: $progress-linear-indeterminate-animation-duration;
      animation-iteration-count: infinite;
      bottom: 0;
      height: inherit;
      left: 0;
      position: absolute;
      right: auto;
      top: 0;
      width: auto;
    }
    .long {
      animation-name: indeterminate-ltr;
    }
    .short {
      animation-name: indeterminate-short-ltr;
    }
  }

  .base-progress-linear__stream {
    animation: $progress-linear-stream-animation;
    animation-play-state: paused;
    bottom: 0;
    left: auto;
    opacity: $progress-linear-stream-opacity;
    pointer-events: none;
    position: absolute;
    transition: inherit;
    transition-property: width, left, right;
  }

  // Modifiers
  .base-progress-linear--reverse {
    .base-progress-linear__background,
    .base-progress-linear__determinate,
    .base-progress-linear__content {
      left: auto;
      right: 0;
    }
    .base-progress-linear__indeterminate {
      .long, .short {
        left: auto;
        right: 0;
      }
      .long {
        animation-name: indeterminate-rtl;
      }
      .short {
        animation-name: indeterminate-short-rtl;
      }
    }
    .base-progress-linear__stream {
      right: auto;
    }
  }

  .base-progress-linear--absolute,
  .base-progress-linear--fixed {
    left: 0;
    z-index: 1;
  }

  .base-progress-linear--absolute {
    position: absolute;
  }

  .base-progress-linear--fixed {
    position: fixed;
  }

  .base-progress-linear--rounded {
    @include tools.rounded($progress-linear-border-radius);

    &.base-progress-linear--rounded-bar {
      .base-progress-linear__determinate,
      .base-progress-linear__indeterminate {
        border-radius: inherit;
      }
    }
  }

  .base-progress-linear--striped {
    .base-progress-linear__determinate {
      animation: $progress-linear-striped-animation;
      background-image: $progress-linear-stripe-gradient;
      background-repeat: repeat;
      background-size: $progress-linear-striped-size;
    }
  }

  .base-progress-linear--active {
    .base-progress-linear__indeterminate {
      .long, .short {
        animation-play-state: running;
      }
    }

    .base-progress-linear__stream {
      animation-play-state: running;
    }
  }

  .base-progress-linear--rounded-bar {
    .base-progress-linear__determinate,
    .base-progress-linear__indeterminate,
    .base-progress-linear__stream + .base-progress-linear__background {
      @include tools.rounded($progress-linear-border-radius);
    }

    .base-progress-linear__determinate {
      border-start-start-radius: 0;
      border-end-start-radius: 0;
    }
  }

  // Keyframes
  @keyframes indeterminate-ltr {
    0% {
      left: -90%;
      right: 100%;
    }
    60% {
      left: -90%;
      right: 100%;
    }
    100% {
      left: 100%;
      right: -35%;
    }
  }
  @keyframes indeterminate-rtl {
    0% {
      left: 100%;
      right: -90%;
    }
    60% {
      left: 100%;
      right: -90%;
    }
    100% {
      left: -35%;
      right: 100%;
    }
  }
  @keyframes indeterminate-short-ltr {
    0% {
      left: -200%;
      right: 100%;
    }
    60% {
      left: 107%;
      right: -8%;
    }
    100% {
      left: 107%;
      right: -8%;
    }
  }
  @keyframes indeterminate-short-rtl {
    0% {
      left: 100%;
      right: -200%;
    }
    60% {
      left: -8%;
      right: 107%;
    }
    100% {
      left: -8%;
      right: 107%;
    }
  }
  @keyframes stream {
    to {
      transform: translateX(var(--base-progress-linear-stream-to));
    }
  }
  @keyframes progress-linear-stripes {
    0% {
      background-position-x: $progress-linear-striped-size;
    }
  }
}